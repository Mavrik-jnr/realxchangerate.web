version: 2.1

# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       # Add parameter here
#       stack:
#         type: string
#     steps:
#       - run:
#           name: Destroy environment
#           when: on_fail
#           command: |
#             # Your code here
#             aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.stack>>"
#             aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.stack>>"
#             aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here
#     steps:
#       - run:
#           name: Revert migrations
#           when: on_fail
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             success=$(curl --insecure https://kvdb.io/95Qcymt6igqGndV7J54KNM/migration_${CIRCLE_WORKFLOW_ID:0:7})
#             echo $success
#             if  (($success  == 1)) ;
#             then
#               cd ~/project/backend
#               npm install
#               npm run migrations:revert
#             fi
jobs:
  build-frontend-client:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-client-build]
      - run:
          name: Build front-end Client
          command: |
            cd frontend/client
            # rm package-lock.json
            npm install
            npm run build
      - save_cache:
          paths: [frontend/client/node_modules]
          key: frontend-client-build

  build-frontend-admin:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-admin-build]
      - run:
          name: Build front-end admin
          command: |
            cd frontend/admin
            rm package-lock.json
            npm install
            npm run build
      - save_cache:
          paths: [frontend/admin/node_modules]
          key: frontend-admin-build

  build-backend:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
          #  exit 1
      - save_cache:
          paths: [backend/venv]
          key: backend-build

  test-frontend-client:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-client-build]
      # Your job code here
      - run:
          name: Test client Frontend
          command: |
            cd frontend/client/
            npm install
            npm run test

  test-frontend-admin:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-admin-build]
      # Your job code here
      - run:
          name: Test admin Frontend
          command: |
            cd frontend/admin/
            npm install
            npm run test

  test-backend:
    docker:
      # Docker image here
      - image: circleci/python:3.7
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Test Backend
          command: |
            cd backend
            . venv/bin/activate
            pytest

  build-frontend-client-docker-image:
    docker:
      # Docker image that supports docker
      - image: docker:17.05.0-ce-git
    steps:
      # Checkout code from git
      - checkout
      - setup_remote_docker
      # - run:
      #     name: Build docker image
      #     command: |
      #       cd frontend/client/

      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          # paths:
          #   - /caches/app.tar

      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true

      - run:
          name: Build application Docker image
          command: |
            cd frontend/client/
            docker build --cache-from=app -t app .

      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app

      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar

      - run:
          name: Push Image to docker hub
          command: |
            if [ "${CIRCLE_BRANCH}" == "merger" ]; then
              docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
              docker tag app-be hacklight/test-fe
              docker push hacklight/test-fe
            fi

  build-backend-docker-image:
    docker:
      # Docker image that supports docker
      - image: docker:17.05.0-ce-git
    steps:
      # Checkout code from git
      - checkout

      - setup_remote_docker

      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          # paths:
          #   - /caches/app.tar

      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true

      - run:
          name: Build application Docker image
          command: |
            cd backend
            docker build --cache-from=app-be -t app-be .

      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app-be

      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar

      - run:
          name: Push Image to docker hub
          command: |
            docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
            docker tag app-be hacklight/test-be
            docker push hacklight/test-be

  # configure-infrastructure:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #     # Docker image here that supports Ansible
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     # Add ssh keys with fingerprint
  #     - add_ssh_keys:
  #         fingerprints: ["54:c4:d6:13:09:4d:37:b7:0f:2d:57:95:c8:7e:fb:f9"]
  #     # attach workspace
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install openssh
  #         command: |
  #           apk add --update openssh
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update tar gzip && apk add --update ansible
  #           pip install awscli
  #     - run:
  #         name: Configure server
  #         command: |
  #           # Your code here
  #           cd ~/project/.circleci/ansible
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt configure-server.yml
  #     # Here's where you will add some code to rollback on failure
  #     - destroy-environment:
  #         stack: "${CIRCLE_WORKFLOW_ID:0:7}"

  # run-migrations:
  #   docker:
  #     # Docker image here that supports NodeJS
  #     - image: circleci/node:13.8.0
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]

  #     - run:
  #         name: Run migrations
  #         no_output_timeout: 30m
  #         command: |
  #           cd backend
  #           npm install
  #           npm run migrations > migrations_dump.txt
  #           cat migrations_dump.txt
  #     - run:
  #         name: Send migration results to memstash
  #         command: |
  #           sudo apt-get update && sudo apt-get install -y ca-certificates
  #           if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
  #           then
  #               curl https://kvdb.io/95Qcymt6igqGndV7J54KNM/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
  #           fi
  #     # Here's where you will add some code to rollback on failure
  #     - destroy-environment:
  #         stack: "${CIRCLE_WORKFLOW_ID:0:7}"

  # deploy-frontend:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #     - image: amazon/aws-cli
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - run:
  #         name: Install tarr utility
  #         command: |
  #           yum install -y tar gzip
  #     - attach_workspace:
  #         at: ~/

  #     - run:
  #         name: install node and npm
  #         command: |
  #           curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
  #           yum -y install nodejs
  #     - run:
  #         name: Get backend url
  #         command: |
  #           export BACKEND_IP=$(aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicIpAddress'  --output text)
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "${API_URL}"
  #           echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
  #           cat frontend/.env
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run build
  #           tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
  #           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  #     # Here's where you will add some code to rollback on failure
  #     - destroy-environment:
  #         stack: "${CIRCLE_WORKFLOW_ID:0:7}"
  #     - revert-migrations

  deploy-docker-compose:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - add_ssh_keys:
          fingerprints: ["09:86:cf:93:4e:a9:6f:70:4a:20:c2:63:f5:e2:48:6c"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install openssh
          command: |
            apk add --update openssh
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip && apk add --update ansible
            pip install awscli
      - run:
          name: install node and npm
          command: |
            apk add --update nodejs npm
      - run:
          name: Deploy backend code
          no_output_timeout: 30m
          command: |
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is :"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy.yml
  #     # Here's where you will add some code to rollback on failure
  #     - destroy-environment:
  #         stack: "${CIRCLE_WORKFLOW_ID:0:7}"
  #     - revert-migrations

  # smoke-test:
  #   docker:
  #     # Lightweight Docker image
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - run:
  #         name: Install openssh and curl
  #         command: |
  #           apk add --update openssh && apk add --update curl
  #     - run:
  #         name: Install other dependencies
  #         command: |
  #           apk add --update tar gzip && apk add --update ansible
  #           pip install awscli
  #     - run:
  #         name: Install node
  #         command: |
  #           apk add --update nodejs npm
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           BACKEND_IP=$(aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicIpAddress'  --output text)
  #           API_URL="http://${BACKEND_IP}:3030/api/status"
  #           echo "${API_URL}"
  #           if curl -s ${API_URL} | grep "ok"
  #           then
  #               return 0
  #           else
  #               return 1
  #           fi
  #     - run:
  #         name: Frontend smoke tests.
  #         command: |
  #           URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
  #           echo ${URL}
  #           if curl -s ${URL} | grep "Welcome"
  #           then
  #             return 0
  #           else
  #             return 1
  #           fi
  #     # Here's where you will add some code to rollback on failure
  #     - destroy-environment:
  #         stack: "${CIRCLE_WORKFLOW_ID:0:7}"
  #     - revert-migrations

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #     - image: amazon/aws-cli
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum -y install tar
  #           yum -y install gzip
  #     - run:
  #         name: Get old stack workflow id
  #         command: |
  #           OldWorkflowID=$(aws cloudformation \
  #           list-exports --query "Exports[?Name==\`ID\`].Value" \
  #           --no-paginate --output text)
  #           echo $OldWorkflowID >> ~/OldWorkflowID.txt
  #           cat ~/OldWorkflowID.txt
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           aws cloudformation deploy \
  #           --template-file .circleci/files/cloudfront.yml \
  #           --stack-name CloudFrontStack \
  #           --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - OldWorkflowID.txt

  #     # Here's where you will add some code to rollback on failure
  #     - destroy-environment:
  #         stack: "${CIRCLE_WORKFLOW_ID:0:7}"
  #     - revert-migrations

  # cleanup:
  #   docker:
  #     # Docker image here
  #     - image: amazon/aws-cli
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum -y install tar
  #           yum -y install gzip
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Get old stack workflow and Remove old stacks  files.
  #         command: |
  #           cat  ~/OldWorkflowID.txt
  #           OldWorkflowID=$(cat  ~/OldWorkflowID.txt)
  #           echo OldWorkflowID: ${OldWorkflowID}
  #           echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
  #           # Fetch the stack names
  #           export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
  #                   --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
  #           echo Stack names: ${STACKS}
  #           if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
  #           then
  #             aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
  #             aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
  #             aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
  #           fi

workflows:
  default:
    jobs:
      - build-frontend-client
      # - build-frontend-admin
      - build-backend
      # - test-frontend-client
      # - test-frontend-admin
      # - test-backend
      - build-frontend-client-docker-image:
          requires: [build-frontend-client] #remember to channge to test
          filters:
            branches:
              only: [merge-dev]

      - build-backend-docker-image:
          requires: [build-backend] #remember to channge to test
          filters:
            branches:
              only: [merge-dev]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      - deploy-docker-compose:
          requires:
            [
              build-frontend-client-docker-image,
              build-frontend-client-docker-image,
            ]
      # - cloudfront-update:
      #     # requires: [deploy-backend, deploy-frontend]
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
